// -*- C++ -*-
//
// Package:    PatternEff
// Class:      PatternEff
// 
/**\class PatternEff PatternEff.cc PatternEff/PatternEff/src/PatternEff.cc

 Description: [one line class summary]

 Implementation:
     [Notes on implementation]
*/
//
// Original Author:  Dominik Bartkiewicz,40 2-A20,+41227671616,
//         Created:  Thu May 13 21:11:17 CEST 2010
// $Id$
//
//


// system include files
#include <memory>

// user include files
#include "FWCore/Framework/interface/Frameworkfwd.h"
#include "FWCore/Framework/interface/EDAnalyzer.h"

#include "FWCore/Framework/interface/Event.h"
#include "FWCore/Framework/interface/MakerMacros.h"

#include "FWCore/ParameterSet/interface/ParameterSet.h"

#include "DQMServices/Core/interface/DQMStore.h"

#include <Geometry/RPCGeometry/interface/RPCRoll.h>
#include <Geometry/RPCGeometry/interface/RPCGeometry.h>
#include "Geometry/Records/interface/MuonGeometryRecord.h"
#include "Geometry/CommonDetUnit/interface/GeomDet.h"
#include "Geometry/RPCGeometry/interface/RPCGeomServ.h"
#include "DataFormats/RPCDigi/interface/RPCDigi.h"
#include "DataFormats/RPCDigi/interface/RPCDigiCollection.h"
#include "DataFormats/MuonDetId/interface/RPCDetId.h"
#include "DataFormats/RPCRecHit/interface/RPCRecHitCollection.h"
#include "DataFormats/GeometrySurface/interface/LocalError.h"
#include "DataFormats/GeometryVector/interface/LocalPoint.h"
#include "DataFormats/Common/interface/Handle.h"
#include "DataFormats/Candidate/interface/Candidate.h"
#include "DataFormats/MuonReco/interface/Muon.h"
 #include "DataFormats/MuonReco/interface/MuonFwd.h"
#include "DataFormats/L1GlobalMuonTrigger/interface/L1MuRegionalCand.h"
#include <DataFormats/L1GlobalMuonTrigger/interface/L1MuGMTReadoutCollection.h>
#include "DataFormats/Math/interface/deltaR.h"
#include "FWCore/ServiceRegistry/interface/Service.h"
#include "FWCore/MessageLogger/interface/MessageLogger.h"
#include "DQMServices/Core/interface/MonitorElement.h"


#include "MuonAnalysis/MuonAssociators/interface/PropagateToMuon.h"
#include "TrackingTools/TrajectoryState/interface/TrajectoryStateOnSurface.h"
#include "TrackingTools/TrajectoryState/interface/TrajectoryStateTransform.h"
#include "TrackingTools/Records/interface/TrackingComponentsRecord.h"
#include "TrackingTools/GeomPropagators/interface/Propagator.h"

#include "TTree.h"
#include "FWCore/ServiceRegistry/interface/Service.h"
#include "CommonTools/UtilAlgos/interface/TFileService.h"


#include "DataFormats/BeamSpot/interface/BeamSpot.h"
//
// class declaration
//



class PatternEff : public edm::EDAnalyzer {
   public:

      explicit PatternEff(const edm::ParameterSet&);
      ~PatternEff();

	DQMStore * dqm;
     edm::Service<TFileService> fs;


     MonitorElement * DeltaEtaEmu, * DeltaEtaDat, * DeltaPhiEmu, * DeltaPhiDat, * PtCodeEmu, * PtCodeDat,* DeltaEtaCSC, * DeltaEtaDT , * DeltaPhiCSC, * DeltaPhiDT, * EtaCSCAll, * PhiCSCAll, * DeltaRDat, * DeltaREmu, * DeltaRCSC, * DeltaRDT;

      double m_deltaRThreshold;
 TTree * tree;
     struct MEPACEff;
   private:
      virtual void beginJob() ;
      virtual void analyze(const edm::Event&, const edm::EventSetup&);
      virtual void endJob() ;
      std::vector<MEPACEff> _mePACEffVec;
         int lumi;
         int run;
         int RPC_Emu;
         int RPC_Dat;
         int GM;
         int CSC;
         int DT;




      // ----------member data ---------------------------
};

//
// constants, enums and typedefs
//

//
// static data member definitions
//
std::string changedot(double x)
	  {
		std::stringstream ss;
		ss<<x;
		std::string s=ss.str();
                if (s.find('.')!=std::string::npos)
		  {s.replace(s.find('.'),1,1,'d');}
		return s;
	  }

struct PatternEff::MEPACEff {
        public:
          MEPACEff(edm::ParameterSet ps, DQMStore * dqm): _ptL(ps.getParameter<double>("ptL")),
                                              _ptH(ps.getParameter<double>("ptH"))
	      
          {
		  
  

	{	
	std::stringstream name;
	std::stringstream title;
	
	name<<"Eta_Emu_Pt_"<<changedot(_ptL)<<"_"<<changedot(_ptH);
	title<<"RPCTrigger: #eta Emu Pt["<<_ptL<<","<<_ptH<<"]";
        _EtaEmu = dqm->book1D(name.str(),title.str(),100,-2.5,2.5);
        
	}
	 {
	std::stringstream name;
	std::stringstream title;

	name<<"Eta_Dat_Pt_"<<changedot(_ptL)<<"_"<<changedot(_ptH);
	title<<"RPCTrigger: #eta Dat Pt["<<_ptL<<","<<_ptH<<"]";
        _EtaDat = dqm->book1D(name.str(),title.str(),100,-2.5,2.5);
	}   
       {
	std::stringstream name;
	std::stringstream title;

	name<<"Eta_Ref_Pt_"<<changedot(_ptL)<<"_"<<changedot(_ptH);
	title<<"GM: #eta Ref Pt["<<_ptL<<","<<_ptH<<"]";
        _EtaRef = dqm->book1D(name.str(),title.str(),100,-2.5,2.5);
	}   
         {
	std::stringstream name;
	std::stringstream title;

	name<<"Eta_CSC_Pt_"<<changedot(_ptL)<<"_"<<changedot(_ptH);
	title<<"CSCTrigger: #eta CSC Pt["<<_ptL<<","<<_ptH<<"]";
        _EtaCSC = dqm->book1D(name.str(),title.str(),100,-2.5,2.5);
	}   

       {
	std::stringstream name;
	std::stringstream title;

	name<<"Eta_DT_Pt_"<<changedot(_ptL)<<"_"<<changedot(_ptH);
	title<<"DTTrigger: #eta DT Pt["<<_ptL<<","<<_ptH<<"]";
        _EtaDT = dqm->book1D(name.str(),title.str(),100,-2.5,2.5);
	}   


       {
	std::stringstream name;
	std::stringstream title;


	name<<"Eta_Dat_DTorCSC_Pt_"<<changedot(_ptL)<<"_"<<changedot(_ptH);
	title<<"#eta Dat and DT or CSC Pt["<<_ptL<<","<<_ptH<<"]";
        _EtaDatAndDTorCSC = dqm->book1D(name.str(),title.str(),100,-2.5,2.5);
	}   

       {
	std::stringstream name;
	std::stringstream title;

	name<<"Eta_Emu_DTorCSC_Pt_"<<changedot(_ptL)<<"_"<<changedot(_ptH);
	title<<" #eta Emu and DT or CSC Pt["<<_ptL<<","<<_ptH<<"]";
        _EtaEmuAndDTorCSC = dqm->book1D(name.str(),title.str(),100,-2.5,2.5);
	}   

          {
	std::stringstream name;
	std::stringstream title;

	name<<"Eta_DTorCSC_Pt_"<<changedot(_ptL)<<"_"<<changedot(_ptH);
	title<<" #eta DT or CSC Pt["<<_ptL<<","<<_ptH<<"]";
        _EtaDTorCSC = dqm->book1D(name.str(),title.str(),100,-2.5,2.5);
	}   


      {	
	std::stringstream name;
	std::stringstream title;
	
	name<<"Phi_Emu_Pt_"<<changedot(_ptL)<<"_"<<changedot(_ptH);
	title<<"RPCTrigger: #eta Emu Pt["<<_ptL<<","<<_ptH<<"]";
        _PhiEmu = dqm->book2D(name.str(),title.str(),100,-2.5,2.5,100,-M_PI,M_PI);
        
	}
	 {
	std::stringstream name;
	std::stringstream title;

	name<<"Phi_Dat_Pt_"<<changedot(_ptL)<<"_"<<changedot(_ptH);
	title<<"RPCTrigger: #eta Dat Pt["<<_ptL<<","<<_ptH<<"]";
        _PhiDat = dqm->book2D(name.str(),title.str(),100,-2.5,2.5,100,-M_PI,M_PI);
	}   
       {
	std::stringstream name;
	std::stringstream title;

	name<<"Phi_Ref_Pt_"<<changedot(_ptL)<<"_"<<changedot(_ptH);
	title<<"GM: #eta Ref Pt["<<_ptL<<","<<_ptH<<"]";
        _PhiRef = dqm->book2D(name.str(),title.str(),100,-2.5,2.5,100,-M_PI,M_PI);
	}   


          };
          
          void fill( const reco::Muon *gl,bool Dat, bool Emu, bool DT ,bool CSC ) 
          {

           if((gl->pt()>=_ptL)&&(gl->pt()<=_ptH)){
	      _EtaRef->Fill(gl->eta());
              _PhiRef->Fill(gl->eta(),gl->phi());
              if(Dat) {
                 _EtaDat->Fill(gl->eta());
                 _PhiDat->Fill(gl->eta(),gl->phi());
              }
              if(Emu) {
                 _EtaEmu->Fill(gl->eta());
                 _PhiEmu->Fill(gl->eta(),gl->phi());
             }
              if(CSC) _EtaCSC->Fill(gl->eta());
              if(DT) _EtaDT->Fill(gl->eta());
              if(Dat && (DT || CSC)) _EtaDatAndDTorCSC->Fill(gl->eta());
              if(Emu && (DT || CSC)) _EtaEmuAndDTorCSC->Fill(gl->eta());
              if(DT || CSC) _EtaDTorCSC->Fill(gl->eta());

	    }	
          }
	  
	  
	
        private:



          float  _ptL, _ptH;
    
        MonitorElement * _EtaEmu, * _EtaDat, * _EtaRef, * _EtaCSC, * _EtaDT, * _EtaDatAndDTorCSC, * _EtaEmuAndDTorCSC, * _EtaDTorCSC,* _PhiEmu, * _PhiDat, * _PhiRef ;

         
      
      }; 
//
// constructors and destructor
//
PatternEff::PatternEff(const edm::ParameterSet& iConfig):
m_deltaRThreshold(iConfig.getParameter<double>("deltaRThreshold"))

{
   //now do what ever initialization is needed

   dqm = edm::Service<DQMStore>().operator->();
   if ( !dqm ) {
      throw cms::Exception("RPCTriggerValidation") << "Cannot get DQMStore \n";
      }

//    EtaEmu = dqm->book1D("Eta_Emu","RPCTrigger: Efficiency vs  #eta Emu",100,-2.5,2.5);
//    EtaDat = dqm->book1D("Eta_Dat","RPCTrigger: Efficiency vs #eta - Dat",100,-2.5,2.5);
//    EtaRef = dqm->book1D("Eta_Ref","RPCTrigger: Efficiency vs #eta - Ref",100,-2.5,2.5);
    EtaCSCAll = dqm->book1D("Eta_CSC_All","CSCTrigger: Distr  #eta ",100,-3.5,3.5);
   PhiCSCAll = dqm->book1D("Phi_CSC_All","CSCTrigger: Distr  #phi ",100,-M_PI,M_PI);
//    EtaDT = dqm->book1D("Eta_DT","DTTrigger: Efficiency vs #eta ",100,-2.5,2.5);
//    EtaDatAndDTorCSC = dqm->book1D("Eta_Dat_DTorCSC","Dat and DT or CSC #eta ",100,-2.5,2.5);
//    EtaEmuAndDTorCSC = dqm->book1D("Eta_Emu_DTorCSC","Emu and DT or CSC #eta ",100,-2.5,2.5);
//    EtaDTorCSC = dqm->book1D("Eta_DTorCSC","DT or CSC #eta ",100,-2.5,2.5);
   DeltaEtaEmu = dqm->book1D("Delta_Eta_Emu","RPCTrigger: Delta #eta - Emu",100,-2.5,2.5);
   DeltaEtaDat = dqm->book1D("Delta_Eta_Dat","RPCTrigger: Delta #eta - Dat",100,-2.5,2.5);
   DeltaPhiEmu = dqm->book1D("Delta_Phi_Emu","RPCTrigger: Delta #eta - Emu",100,-2.5,2.5);
   DeltaPhiDat = dqm->book1D("Delta_Phi_Dat","RPCTrigger: Delta #eta - Dat",100,-2.5,2.5);
   PtCodeDat = dqm->book1D("PtCode_Dat","RPCTrigger: PtCode - Dat",32, -0.5, 31.5);
   PtCodeEmu = dqm->book1D("PtCode_Emu","RPCTrigger: PtCode - Emu",32, -0.5, 31.5);
   DeltaEtaCSC = dqm->book1D("Delta_Eta_CSC","CSCTrigger: Delta #eta",100,-2.5,2.5);
   DeltaEtaDT = dqm->book1D("Delta_Eta_DT","DTTrigger: Delta #eta ",100,-2.5,2.5);
   DeltaPhiCSC = dqm->book1D("Delta_Phi_CSC","CSCTrigger: Delta #eta ",100,-2.5,2.5);
   DeltaPhiDT = dqm->book1D("Delta_Phi_DT","DTTrigger: Delta #eta ",100,-2.5,2.5);
   
   DeltaREmu = dqm->book1D("Delta_R_Emu","RPCTrigger: Delta R - Emu",100,-2.5,2.5);
   DeltaRDat = dqm->book1D("Delta_R_Dat","RPCTrigger: Delta R - Dat",100,-2.5,2.5);
   DeltaRCSC = dqm->book1D("Delta_R_CSC","CSCTrigger: Delta R",100,-2.5,2.5);
   DeltaRDT = dqm->book1D("Delta_R_DT","DTTrigger: Delta R",100,-2.5,2.5);
   

    tree=fs->make<TTree>("L1_Eff", "L1_Eff");


tree->Branch("lumi", &lumi,"lumi/I");
tree->Branch("run",&run,"run/I");
tree->Branch("RPC_Emu", &RPC_Emu,"RPC_Emu/I");
tree->Branch("RPC_Dat",&RPC_Dat,"RPC_Dat/I");
tree->Branch("GM", &GM,"GM/I" );
tree->Branch("CSC", &CSC, "CSC/I");
tree->Branch("DT",   &DT,"DT/I");

   std::vector<edm::ParameterSet> PtRanges = iConfig.getParameter< std::vector<edm::ParameterSet> > ("PtRanges");std::vector<edm::ParameterSet>::iterator it =PtRanges.begin(); 
   std::vector<edm::ParameterSet>::iterator itE =PtRanges.end(); 
   
   it = PtRanges.begin(); 
   itE =PtRanges.end(); 
  
   for (;it!=itE;++it){
      
      _mePACEffVec.push_back( MEPACEff(*it,dqm) );     

   }




}


PatternEff::~PatternEff()
{
 
   // do anything here that needs to be done at desctruction time
   // (e.g. close files, deallocate resources etc.)

}


//
// member functions
//

// ------------ method called to for each event  ------------
void
PatternEff::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
{
   using namespace edm;
   using namespace reco;
   using namespace std;






     std::vector<L1MuRegionalCand> L1Dat;
     std::vector<L1MuRegionalCand> L1Emu;
     std::vector<L1MuRegionalCand>  L1DT;
     std::vector<L1MuRegionalCand>  L1CSC;
     edm::InputTag DatTag("gtDigis","","RECO");
     edm::InputTag EmuTag("simGmtDigis","","L1Wide");
     edm::Handle<L1MuGMTReadoutCollection> pCollection;

  iEvent.getByLabel(EmuTag,pCollection); 
  L1MuGMTReadoutCollection const* gmtrc = pCollection.product();
  vector<L1MuGMTReadoutRecord> gmt_records = gmtrc->getRecords();
  vector<L1MuGMTReadoutRecord>::const_iterator RRItr;


  for( RRItr = gmt_records.begin() ;
       RRItr != gmt_records.end() ;
       RRItr++ ) 
  {

     vector<vector<L1MuRegionalCand> > brlAndFwdCands;
     brlAndFwdCands.push_back(RRItr->getBrlRPCCands());
     brlAndFwdCands.push_back(RRItr->getFwdRPCCands());

     vector<vector<L1MuRegionalCand> >::iterator RPCTFCands = brlAndFwdCands.begin();
     for(; RPCTFCands!= brlAndFwdCands.end(); ++RPCTFCands)
     {
      
        for( vector<L1MuRegionalCand>::const_iterator 
            ECItr = RPCTFCands->begin() ;
            ECItr != RPCTFCands->end() ;
            ++ECItr ) 
        {
        	if(!ECItr->empty()) L1Emu.push_back(*ECItr);
        }
     }

	

  }


iEvent.getByLabel(DatTag,pCollection);

gmtrc = pCollection.product();
gmt_records = gmtrc->getRecords();


  for( RRItr = gmt_records.begin() ;
       RRItr != gmt_records.end() ;
       RRItr++ ) 
  {

     vector<vector<L1MuRegionalCand> > brlAndFwdCands;
     brlAndFwdCands.push_back(RRItr->getBrlRPCCands());
     brlAndFwdCands.push_back(RRItr->getFwdRPCCands());

     vector<vector<L1MuRegionalCand> >::iterator RPCTFCands = brlAndFwdCands.begin();
     for(; RPCTFCands!= brlAndFwdCands.end(); ++RPCTFCands)
     {
      
        for( vector<L1MuRegionalCand>::const_iterator 
            ECItr = RPCTFCands->begin() ;
            ECItr != RPCTFCands->end() ;
            ++ECItr ) 
        {
        	if(!ECItr->empty()) L1Dat.push_back(*ECItr);
        }
     }
	

	L1DT=RRItr->getDTBXCands();

	L1CSC=RRItr->getCSCCands();
  }




   //Handle<CandidateView> mcHandle; // can hold reco::Muon or genParticle
   //iEvent.getByLabel("muons", mcHandle);


    edm::ParameterSet pset; 
    std::string str("none");
    pset.addParameter("useTrack", str);
    pset.addParameter("useState", "atVertex");

    pset.addParameter("useSimpleGeometry", true);


     edm::Handle<reco::BeamSpot> pBeamSpot;
     iEvent.getByLabel("offlineBeamSpot", pBeamSpot);
     const reco::BeamSpot *bspot = pBeamSpot.product();
     const math::XYZPoint bspotPosition = bspot->position();

lumi=iEvent.getLuminosityBlock().luminosityBlockAuxiliary().id().luminosityBlock();
run=iEvent.run();
   RPC_Emu=L1Emu.size();
RPC_Dat=L1Dat.size();
GM=0;
CSC=0;
DT=0;


      std::vector<L1MuRegionalCand>::iterator itL1;
      std::vector<L1MuRegionalCand>::iterator itL1E;


      itL1 = L1DT.begin();
      itL1E = L1DT.end();
      for (;itL1!=itL1E;++itL1){
          if ( !(itL1->empty()) ){
         DT++;
         }
      }

      itL1 = L1CSC.begin();
      itL1E = L1CSC.end();
      for (;itL1!=itL1E;++itL1){
          if ( !(itL1->empty()) ){
         CSC++;
         }
      }


   Handle<MuonCollection> mcHandle;
  iEvent.getByLabel( "muons", mcHandle );

    for( reco::MuonCollection::const_iterator ref = mcHandle->begin(); ref != mcHandle->end(); ref++ ){
    // reco::MuonRef ref = mcHandle->refAt(i);
     bool Dat= false;
     bool Emu= false;
     bool DT= false;
     bool CSC= false;
    

      if((ref->pdgId() == 13 || ref->pdgId() == -13) && ref->isGlobalMuon() && ref->isTrackerMuon() && (ref->track ()->dxy(bspotPosition) )< 0.5 ) {

    GM++;
    double _phi ,_eta;

    PropagateToMuon propagatorToMuon(pset);

     propagatorToMuon.init(iSetup);

     TrajectoryStateOnSurface trackAtRPC=propagatorToMuon.extrapolate(*ref);

        if (trackAtRPC.isValid()) {
         _phi = trackAtRPC.globalPosition().phi();
         _eta = trackAtRPC.globalPosition().eta();
       }else{
    _phi=ref->phi(); 
    _eta=ref->eta(); 
    }



      itL1 = L1Dat.begin();
      itL1E = L1Dat.end();
      for (;itL1!=itL1E;++itL1){

         double dr = reco::deltaR(itL1->etaValue(),itL1->phiValue(),_eta,_phi);
         if (dr < m_deltaRThreshold) Dat=true;
         DeltaEtaDat->Fill(_eta-itL1->etaValue());
         DeltaRDat->Fill(dr);
         DeltaPhiDat->Fill(_phi-itL1->phiValue());
         PtCodeDat->Fill(itL1->pt_packed());
      }
      
      itL1 = L1Emu.begin();
      itL1E = L1Emu.end();
      for (;itL1!=itL1E;++itL1){

         double dr = reco::deltaR(itL1->etaValue(),itL1->phiValue(),_eta,_phi);
         if (dr < m_deltaRThreshold) Emu=true;
         DeltaEtaEmu->Fill(_eta-itL1->etaValue());
         DeltaPhiEmu->Fill(_phi-itL1->phiValue());
         PtCodeEmu->Fill(itL1->pt_packed());
         DeltaREmu->Fill(dr);
      }

      itL1 = L1DT.begin();
      itL1E = L1DT.end();
      for (;itL1!=itL1E;++itL1){
          if ( !(itL1->empty()) ){
         double dr = reco::deltaR(itL1->etaValue(),itL1->phiValue(),_eta,_phi);
         if (dr < m_deltaRThreshold) DT=true;
         DeltaEtaDT->Fill(_eta-itL1->etaValue());
         DeltaPhiDT->Fill(_phi-itL1->phiValue());
         DeltaRDT->Fill(dr);
         }
      }

      itL1 = L1CSC.begin();
      itL1E = L1CSC.end();
      for (;itL1!=itL1E;++itL1){
          if ( !(itL1->empty()) ){
         double dr = reco::deltaR(itL1->etaValue(),itL1->phiValue(),_eta,_phi);
         if (dr < m_deltaRThreshold) CSC=true;
         DeltaEtaCSC->Fill(_eta-itL1->etaValue());
         DeltaPhiCSC->Fill(_phi-itL1->phiValue());
	 EtaCSCAll->Fill(itL1->etaValue());
	 PhiCSCAll->Fill(itL1->phiValue());
         DeltaRCSC->Fill(dr);
         }
      }

    
     std::vector<MEPACEff>::iterator itEff =  _mePACEffVec.begin();
     std::vector<MEPACEff>::iterator itEffE =  _mePACEffVec.end();
     for (;itEff!=itEffE; ++itEff){
      itEff->fill(&(*ref),Dat,Emu,DT,CSC);
     }
     if(Dat && !Emu) std::cout<<"error Dat not Emu run:"<<run<<"lui "<<lumi<<"event "<<std::endl;

     }
   }

  if(RPC_Emu+RPC_Dat+GM+CSC+DT>0) tree->Fill();
  if(RPC_Emu<RPC_Dat) {

     // Retrieve RecHits from the event
  edm::Handle<RPCRecHitCollection> recHitHandle;
   iEvent.getByLabel("rpcRecHits", recHitHandle);

 edm::ESHandle<RPCGeometry> theRPCGeometry;
   iSetup.get<MuonGeometryRecord>().get(theRPCGeometry);
   if (!theRPCGeometry.isValid()) {
     edm::LogWarning("MuonSimHitsValidAnalyzer::fillRPC")
       << "Unable to find MuonGeometryRecord for the RPCGeometry in event!";
     return;
   }
   

   const RPCGeometry &    rpcGeom(*theRPCGeometry);
  
  typedef RPCRecHitCollection::const_iterator RecHitIter;

   

   for ( RecHitIter recHitIter = recHitHandle->begin();
        recHitIter != recHitHandle->end(); ++recHitIter )
  {
    const RPCDetId detId = static_cast<const RPCDetId>(recHitIter->rpcId());
    const RPCRoll* roll = dynamic_cast<const RPCRoll*>(rpcGeom.roll(detId()));
    if ( !roll ) continue;

    const int region = roll->id().region();
    const int ring = roll->id().ring();
    //const int sector = roll->id().sector();
    const int station = abs(roll->id().station());
    //const int layer = roll->id().layer();
    //const int subSector = roll->id().subsector();
    std::cout<<"!!!! region : "<<region<<" ring : "<<ring<<" station : "<<station<<std::endl;
 


     }
 }
}


// ------------ method called once each job just before starting event loop  ------------
void 
PatternEff::beginJob()
{
}

// ------------ method called once each job just after ending the event loop  ------------
void 
PatternEff::endJob() {
if ( dqm ) dqm -> save("PACEff.root");
}


//define this as a plug-in
DEFINE_FWK_MODULE(PatternEff);
